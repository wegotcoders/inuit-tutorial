<title>Inuit-rails live demo introduction and analysis</title>

<div class="main-article__icon--show t-center">
  <svg width="182" height="40" xmlns="http://www.w3.org/2000/svg">
    <text xml:space="preserve" font-family="courier new" font-size="44" y="35" x="0" stroke-linecap="null" stroke-linejoin="null" stroke-width="0" stroke="#000000" fill="#222" id="article-icon">ARTICLE</text>
  </svg>
</div>

<div class="main-article__dropdown layout__item layout__item--center block-within-dropdown">
<p class="main-paragraph">
  Let's get to it! The most important thing to get right with the inuitcss framework is the layout, and it's quite simple. Put the 'layout' class on your parent element, and then bestow the corresponding 'layout__item' class on all direct descendants. There are minor variations on this, for example if you enable the We Got Coders wrapper you can prefix 'layout' with  'lap-and-up-' or 'palm-' to correspond to inuitcss' baked-in media queries, and there are BEM modifiers such as '--tiny' or '--huge' which control the size of the guttering. That's the first half of controlling layout with inuitcss, the second half is setting the width of your DOM elements. Again, you can prefix the class names with the inuitcss device aliases for responsive behaviour, but here if you enable the We Got Coders wrapper you will have the choice to use class names such as 'seven-twentieths' or 'one-half' (though the original 1/4, 15/17 or one-of-four, fifteen-of-seventeen syntaxes remain available if you prefer). And that's it! The rest is just fine-tuning. There are responsive spacing classes that follow the same conventions regarding device aliases such as 'pl0', 'palm-mb--', or 'desk-pt++' which are available as soon as you activate them in the usual way.
</p>

<p class="main-paragraph">
  Note 1. In the three examples of layout given below examples 1 and 3 are standard implementations of inuitcss using 'layout' and 'layout--flush' respectively, whereas example 2 uses the 'layout__item--center' class that also inherits from any of the 'layout' variants but instead of guttering with a padding-right they gutter with half of the same on each side to achieve a true centring of the content.
</p>

<p class="main-paragraph">
  Note 2. Because all layout__items have 'border-box' set for their box-sizing, paddings will push inward on content and therefore should generally be favoured over margins for adjusting horizontal spacing because this will not damage the column structure.
</p>

<p class="main-paragraph">
  The remainder of this demo page has two purposes. First, to demonstrate good layout practices in context - take a look at this page on different devices! And second, to give some vanilla examples of the various other components that the inuitcss framework offers. For exhaustive detail on any part of the framework presented here, please take a look at our <a href="#" class="main-link">docs</a>.
</p>
</div>
